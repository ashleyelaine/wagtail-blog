# Generated by Django 2.1.7 on 2019-05-01 01:42

import datetime
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('page_title_override', models.CharField(blank=True, help_text='Use if you would like the page title to be different than what appears in the navigation.', max_length=255)),
                ('page_content', wagtail.core.fields.StreamField([('sub_heading_block', wagtail.core.blocks.StructBlock([('sub_heading', wagtail.core.blocks.TextBlock(required=True))])), ('content_block', wagtail.core.blocks.StructBlock([('content', wagtail.core.blocks.RichTextBlock())])), ('cta_block', wagtail.core.blocks.StructBlock([('link', wagtail.core.blocks.CharBlock()), ('link_text', wagtail.core.blocks.CharBlock()), ('target', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('_self', 'Same Window'), ('_blank', 'New Window')], help_text='Default is Same Window', required=False))])), ('code_block', wagtail.core.blocks.StructBlock([('code', wagtail.core.blocks.StructBlock([('language', wagtail.core.blocks.ChoiceBlock(choices=[('css', 'CSS'), ('html', 'HTML'), ('javascript', 'Javascript'), ('json', 'JSON'), ('python', 'Python'), ('scss', 'SCSS')], help_text='Coding language', identifier='language', label='Language')), ('code', wagtail.core.blocks.TextBlock(identifier='code', label='Code'))], label='Code'))])), ('html_block', wagtail.core.blocks.StructBlock([('html', wagtail.core.blocks.TextBlock(classname='code', required=True))]))], blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('page_title_override', models.CharField(blank=True, help_text='Use if you would like the page title to be different than what appears in the navigation.', max_length=255)),
                ('intro', models.TextField(blank=True)),
                ('page_content', wagtail.core.fields.StreamField([('sub_heading_block', wagtail.core.blocks.StructBlock([('sub_heading', wagtail.core.blocks.TextBlock(required=True))])), ('content_block', wagtail.core.blocks.StructBlock([('content', wagtail.core.blocks.RichTextBlock())])), ('cta_block', wagtail.core.blocks.StructBlock([('link', wagtail.core.blocks.CharBlock()), ('link_text', wagtail.core.blocks.CharBlock()), ('target', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('_self', 'Same Window'), ('_blank', 'New Window')], help_text='Default is Same Window', required=False))])), ('code_block', wagtail.core.blocks.StructBlock([('code', wagtail.core.blocks.StructBlock([('language', wagtail.core.blocks.ChoiceBlock(choices=[('css', 'CSS'), ('html', 'HTML'), ('javascript', 'Javascript'), ('json', 'JSON'), ('python', 'Python'), ('scss', 'SCSS')], help_text='Coding language', identifier='language', label='Language')), ('code', wagtail.core.blocks.TextBlock(identifier='code', label='Code'))], label='Code'))])), ('html_block', wagtail.core.blocks.StructBlock([('html', wagtail.core.blocks.TextBlock(classname='code', required=True))]))], blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('page_title_override', models.CharField(blank=True, help_text='Use if you would like the page title to be different than what appears in the navigation.', max_length=255)),
                ('intro', models.TextField(blank=True)),
                ('intro_content', wagtail.core.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
                ('page_content', wagtail.core.fields.StreamField([('sub_heading_block', wagtail.core.blocks.StructBlock([('sub_heading', wagtail.core.blocks.TextBlock(required=True))])), ('content_block', wagtail.core.blocks.StructBlock([('content', wagtail.core.blocks.RichTextBlock())])), ('cta_block', wagtail.core.blocks.StructBlock([('link', wagtail.core.blocks.CharBlock()), ('link_text', wagtail.core.blocks.CharBlock()), ('target', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('_self', 'Same Window'), ('_blank', 'New Window')], help_text='Default is Same Window', required=False))])), ('code_block', wagtail.core.blocks.StructBlock([('code', wagtail.core.blocks.StructBlock([('language', wagtail.core.blocks.ChoiceBlock(choices=[('css', 'CSS'), ('html', 'HTML'), ('javascript', 'Javascript'), ('json', 'JSON'), ('python', 'Python'), ('scss', 'SCSS')], help_text='Coding language', identifier='language', label='Language')), ('code', wagtail.core.blocks.TextBlock(identifier='code', label='Code'))], label='Code'))])), ('html_block', wagtail.core.blocks.StructBlock([('html', wagtail.core.blocks.TextBlock(classname='code', required=True))]))], blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.FileField(blank=True, null=True, upload_to='images/')),
                ('logo_text', models.CharField(blank=True, help_text='Add logo as text or use for logo alt text.', max_length=255, null=True)),
                ('logo_sub_text', models.CharField(blank=True, help_text='Add logo sub text.', max_length=255, null=True)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Global Settings',
            },
        ),
        migrations.CreateModel(
            name='PostPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', models.TextField(blank=True)),
                ('date', models.DateTimeField(default=datetime.datetime.today, verbose_name='Post date')),
                ('page_content', wagtail.core.fields.StreamField([('sub_heading_block', wagtail.core.blocks.StructBlock([('sub_heading', wagtail.core.blocks.TextBlock(required=True))])), ('content_block', wagtail.core.blocks.StructBlock([('content', wagtail.core.blocks.RichTextBlock())])), ('cta_block', wagtail.core.blocks.StructBlock([('link', wagtail.core.blocks.CharBlock()), ('link_text', wagtail.core.blocks.CharBlock()), ('target', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('_self', 'Same Window'), ('_blank', 'New Window')], help_text='Default is Same Window', required=False))])), ('code_block', wagtail.core.blocks.StructBlock([('code', wagtail.core.blocks.StructBlock([('language', wagtail.core.blocks.ChoiceBlock(choices=[('css', 'CSS'), ('html', 'HTML'), ('javascript', 'Javascript'), ('json', 'JSON'), ('python', 'Python'), ('scss', 'SCSS')], help_text='Coding language', identifier='language', label='Language')), ('code', wagtail.core.blocks.TextBlock(identifier='code', label='Code'))], label='Code'))])), ('html_block', wagtail.core.blocks.StructBlock([('html', wagtail.core.blocks.TextBlock(classname='code', required=True))]))], blank=True)),
                ('seo_keywords', models.CharField(blank=True, help_text='Optional. Separate each keyword with a comma.', max_length=255)),
                ('socials', models.BooleanField(default=True, verbose_name='Social Icons?')),
                ('addthis_pubid', models.CharField(blank=True, default='5bbcb76243b82dd4', help_text='This is the string that is AFTER `#pubid=`. Ex: ra-5bbcb76243b82dd4', max_length=25, null=True, verbose_name='AddThis PubId')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PostPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='base.PostPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_postpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='postpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='base.PostPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='formfield',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='base.FormPage'),
        ),
    ]
